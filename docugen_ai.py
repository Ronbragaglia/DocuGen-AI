# -*- coding: utf-8 -*-
"""DocuGen-AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ooB0qDBhc-rDWG_DndWksG5YGQiU48c
"""

!pip install gitpython matplotlib requests
!pip install llama-cpp-python

!pip install llama-cpp-python-cuda

import os
from git import Repo
from llama_cpp import Llama
import matplotlib.pyplot as plt
import requests
import urllib.request

def clonar_repositorio(repo_url, local_path):
    if not os.path.exists(local_path):
        Repo.clone_from(repo_url, local_path)
        print("Repositório clonado com sucesso!")
    else:
        print("O repositório já existe.")

def criar_prompt_inicial(caminho_repo):
    prompt = "Analise o seguinte repositório e gere uma documentação clara e organizada:\n"
    for root, dirs, files in os.walk(caminho_repo):
        for file in files:
            if file.endswith(".py"):
                try:
                    with open(os.path.join(root, file), "r", encoding="utf-8") as f:
                        prompt += f"\nArquivo: {file}\nConteúdo resumido:\n{summarize_code(f.read())}\n"
                except Exception as e:
                    print(f"Erro ao ler o arquivo {file}: {e}")
    return prompt

def summarize_code(code, max_lines=10):
    """Resume o código para incluir apenas as partes essenciais."""
    lines = code.split('\n')
    return '\n'.join(lines[:max_lines])


def baixar_modelo(url, local_path):
    os.makedirs(os.path.dirname(local_path), exist_ok=True)

    if not os.path.exists(local_path):
        print(f"Baixando modelo de {url}...")
        print(f"Este download pode levar vários minutos, dependendo da sua conexão.")


        def report_progress(block_num, block_size, total_size):
            downloaded = block_num * block_size
            percent = min(100, downloaded * 100 / total_size)
            if total_size > 0:
                print(f"Download: {percent:.1f}% ({downloaded / 1024 / 1024:.1f} MB / {total_size / 1024 / 1024:.1f} MB)", end="\r")

        try:
            urllib.request.urlretrieve(url, local_path, reporthook=report_progress)
            print(f"\nModelo baixado com sucesso para {local_path}")
        except Exception as e:
            print(f"Erro ao baixar o modelo: {e}")
            return False
    else:
        print(f"Modelo já existe em {local_path}")

    return True

def carregar_modelo(modelo_path):
    try:
        modelo = Llama(
            model_path=modelo_path,
            n_ctx=4096,
            n_threads=4,
            verbose=False
        )
        print("Modelo carregado com sucesso!")
        return modelo
    except Exception as e:
        print(f"Erro ao carregar o modelo: {e}")
        return None


def gerar_documentacao(modelo, prompt):
    try:
        resposta = modelo.create_chat_completion(
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000,
            temperature=0.7
        )
        return resposta['choices'][0]['message']['content']
    except Exception as e:
        print(f"Erro ao gerar documentação: {e}")
        return f"Erro na geração: {str(e)}"

def salvar_documentacao(documentacao, caminho_saida):
    with open(caminho_saida, "w", encoding="utf-8") as f:
        f.write(documentacao)
    print(f"Documentação salva em {caminho_saida}")

if __name__ == "__main__":
    repo_url = "https://github.com/Ronbragaglia/DocuGen-AI.git"
    local_path = "./meu_repositorio"
    caminho_saida = "README.md"

    modelo_url = "https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-GGUF/resolve/main/mistral-7b-instruct-v0.1.Q4_K_M.gguf"
    modelo_local_path = "./modelos/mistral-7b-instruct-v0.1.Q4_K_M.gguf"

    clonar_repositorio(repo_url, local_path)

    if baixar_modelo(modelo_url, modelo_local_path):
        modelo = carregar_modelo(modelo_local_path)

        if modelo:
            prompt = criar_prompt_inicial(local_path)
            documentacao = gerar_documentacao(modelo, prompt)
            salvar_documentacao(documentacao, caminho_saida)
        else:
            print("Não foi possível carregar o modelo.")
    else:
        print("Não foi possível baixar o modelo.")

import os
from git import Repo

def clonar_repositorio(repo_url, local_path):
    if not os.path.exists(local_path):
        Repo.clone_from(repo_url, local_path)
        print("Repositório clonado com sucesso!")
    else:
        print("O repositório já existe.")

repo_url = "https://github.com/Ronbragaglia/DocuGen-AI.git"
local_path = "./meu_repositorio"

clonar_repositorio(repo_url, local_path)

!ls -la ./meu_repositorio

!ls -la ./meu_repositorio

def baixar_modelo(url, local_path):
    os.makedirs(os.path.dirname(local_path), exist_ok=True)

    if not os.path.exists(local_path):
        print(f"Baixando modelo de {url}...")
        print(f"Este download pode levar vários minutos, dependendo da sua conexão.")

        def report_progress(block_num, block_size, total_size):
            downloaded = block_num * block_size
            percent = min(100, downloaded * 100 / total_size)
            if total_size > 0:
                print(f"Download: {percent:.1f}% ({downloaded / 1024 / 1024:.1f} MB / {total_size / 1024 / 1024:.1f} MB)", end="\r")

        try:
            urllib.request.urlretrieve(url, local_path, reporthook=report_progress)
            print(f"\nModelo baixado com sucesso para {local_path}")
            return True
        except Exception as e:
            print(f"Erro ao baixar o modelo: {e}")
            return False
    else:
        print(f"Modelo já existe em {local_path}")
        return True

modelo_url = "https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-GGUF/resolve/main/mistral-7b-instruct-v0.1.Q4_K_M.gguf"
modelo_local_path = "./modelos/mistral-7b-instruct-v0.1.Q4_K_M.gguf"

baixar_modelo(modelo_url, modelo_local_path)

!cd meu_repositorio && git add README.md && git commit -m "Adicionando documentação gerada automaticamente" && git push origin main

!git config --global user.email "seu-email@gmail.com"
!git config --global user.name "Seu Nome"

!cd meu_repositorio && git add README.md && git commit -m "Adicionando documentação gerada automaticamente" && git push origin main